{"version":3,"sources":["ChatHeader.js","Message.js","features/userSlice.js","features/appSlice.js","firebase.js","app/Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","userSlice","createSlice","name","initialState","reducers","login","state","action","payload","logout","actions","selectUser","appSlice","channelId","setChannelInfo","selectChannelId","app","selectChannelName","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","disabled","onChange","e","target","type","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dd724f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./ChatHeader.css\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\"\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\n\r\nfunction ChatHeader({channelName}) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">#</span>\r\n                    {channelName}\r\n                </h3>\r\n            </div>\r\n\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholder=\"Search\" />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./Message.css\"\r\n\r\nfunction Message({timestamp, user, message}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo}/>\r\n            <div className=\"message__info\">\r\n               <h4>\r\n                    {user.displayName}\r\n                    <span className='message__timestamp'>\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4> \r\n\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAzKYw2CXrdKgXRFtBjFgTWzf9KxiCqhwA\",\r\n  authDomain: \"discord-clone-yt-a9ae9.firebaseapp.com\",\r\n  projectId: \"discord-clone-yt-a9ae9\",\r\n  storageBucket: \"discord-clone-yt-a9ae9.appspot.com\",\r\n  messagingSenderId: \"76312587150\",\r\n  appId: \"1:76312587150:web:a1045005390d61a3de12df\",\r\n  measurementId: \"G-9Y1QB2Y0V7\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useEffect, useState } from \"react\";\r\nimport ChatHeader from \"../ChatHeader\";\r\nimport \"./Chat.css\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport  GifIcon from \"@material-ui/icons/Gif\"\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"../Message\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelId, selectChannelName } from \"../features/appSlice\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection(\"channels\")\r\n            .doc(channelId)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"asc\")\r\n            .onSnapshot((snapshot) =>\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n        }\r\n    }, [channelId]);\r\n\r\n    const sendMessage = e => {\r\n        e.preventDefault();\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: input,\r\n            user: user\r\n        });\r\n\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName}/>\r\n\r\n            <div className=\"chat__messages\">\r\n                {messages.map((message) => (\r\n                    <Message \r\n                        timestamp={message.timestamp}\r\n                        message={message.message}\r\n                        user={message.user}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n              <AddCircleIcon fontSize=\"large\" />  \r\n              <form>\r\n                <input value={input} \r\n                disabled={!channelId}\r\n                onChange={(e) => setInput(e.target.value)} \r\n                placeholder={`Message #${channelName}`}/>\r\n                <button \r\n                    disabled={!channelId}\r\n                    className=\"chat__inputButton\" \r\n                    type='submit'\r\n                    onClick={sendMessage}\r\n                    > Send Message</button>\r\n              </form>\r\n\r\n              <div className=\"chat__inputIcons\">\r\n                  <CardGiftcardIcon fontSize=\"large\" />\r\n                  <GifIcon fontSize=\"large\" />\r\n                  <EmojiEmotionsIcon fontSize=\"large\" />\r\n              </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\nimport \"./SidebarChannel.css\";\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className='sidebarChannel' onClick={() => dispatch \r\n        (setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n        }))}>\r\n            <h4>\r\n                <span className='sidebarChannel__hash'>#</span>{channelName}\r\n\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\"\r\nimport { Avatar } from '@material-ui/core';\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from \"./features/userSlice\"\r\nimport db, { auth } from \"./firebase\";\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"channels\").onSnapshot((snapshot) => \r\n            setChannels(\r\n                snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                channel: doc.data(),\r\n            }))\r\n        ));   \r\n    }, [])\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter a new channel name\");\r\n\r\n        if (channelName) {\r\n            db.collection(\"channels\").add({\r\n                channelName: channelName,\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>Clever Programmer</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel}\r\n                    className=\"sidebar__addChannel\" />             \r\n                </div>\r\n\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(({ id, channel}) => (\r\n                        <SidebarChannel key={id} id={id} channelName={channel.channelName}/>\r\n                    ))} \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon\r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                />    \r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 5)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\"\r\nimport { auth, provider } from \"./firebase\";\r\nimport \"./Login.css\";\r\n\r\nfunction Login() {\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n    };\r\n    \r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/en/thumb/9/98/Discord_logo.svg/800px-Discord_logo.svg.png\" alt=\"\"/>\r\n            </div>\r\n\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport Chat from \"./app/Chat\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { selectUser } from \"./features/userSlice\"\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\nimport { login, logout } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        })\r\n      );\r\n      } else {\r\n        dispatch(logout())\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>  \r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}